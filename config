#
# Basic setup options.  If you are running as the postgres user and
# are using PostgreSQL 8.4 or later, you normally don't need to
# change any of these.
#

BASEDIR=`pwd`
PGBENCHBIN=`which pgbench`
GNUPLOT=`which gnuplot`

# These values are for pgbench 9.6 - 13
TESTDIR="tests"

# Use this value for pgbench 8.4 - 9.5.  There is also a directory for 8.3.
# TESTDIR="tests/tests-9.5"

# SKIPINIT should be set to 1 either when simulating a cold cache, or
# if you are not using the pgbench tables for your test
SKIPINIT=0

# Set TABBED to 1 to use Javascript for a multi-tabbed display format
TABBED=0

# Set OSDATA to 1 to collect OS data using vmstat and iostat
OSDATA=0

# Test/result database connection
TESTHOST=$PGHOST
TESTUSER=$PGUSER
TESTPORT=$PGPORT
TESTDB=pgbench

RESULTHOST="$TESTHOST"
RESULTUSER="$TESTUSER"
RESULTPORT="$TESTPORT"
RESULTDB=pgbenchtools

# What server name to use when saving the results.  It's just a label,
export SERVERNAME=rdsa

#
# Main test run customization.  Test scripts add a .sql extension for you.
#

# Set this to a number only when using pgbench 9.0 or later.  This will set
# the number of worker threads up to this maximum for each client count
MAX_WORKERS="auto"
# Blank setting, typically used with earlier pgbench versions
#MAX_WORKERS=""

SCRIPT="tpc-b"
SCALES="1 10"
SETCLIENTS="1 10 20"
SETTIMES=3

# FILLFACTOR option
# uses fillfactor option from pgbench
# default is 100
FILLFACTOR="100"

# RUNTIME is in seconds.  If it is specified, then TOTTRANS is ignored.
# Setting a time instead of a transaction account is only available
# in 8.4 and later.
RUNTIME=60
TOTTRANS=""

# Use a transaction count instead for 8.3 or earlier
#RUNTIME=""
#TOTTRANS=100000

# Starting in the 9.4 pgbench, you can limit the maximum rate.
# This takes a list like scale and clients
SETRATES=""

# Set to 1 to compute a lot of latency buckets at 1% intervals
LARGEBUCKETS=0

# Set to 1 to use prepared statements (pgbench -M)
PREPARED=0

# Set to 1 to trim 10% off the start and end of the test
TRIM=1

#
# Parameters for system monitoring code
#
DISKLIST="sda"

################################################
# Enhanced performance monitoring parameters
################################################

#
# DB Resource ID for instance against which tests are being run
# A Log stream with this name gets created under RDSOOSMetrics once the emon is enabled for instance
#
export LOG_STREAM_DB_INSTANCE='db-V2R2O3XWYK6N4CYIM2UC3L6IZE'

#
# Exclusion list for the metrics
# All metric except the following will be used in the reports
#
METRIC_cpuUtilization_exclude="idle"
METRIC_memory_exclude="total hugePagesRsvd hugePagesFree hugePagesSurp hugePagesTotal hugePagesSize irq"
METRIC_loadAverageMinute_exclude=""
METRIC_tasks_exclude=""
METRIC_swap_exclude=""
METRIC_network_exclude="interface dummy"


export METRIC_cpuUtilization_exclude="idle"
export METRIC_memory_exclude="total,hugePagesRsvd,hugePagesFree,hugePagesSurp,hugePagesTotal,hugePagesSize,irq"
export METRIC_loadAverageMinute_exclude=""
export METRIC_tasks_exclude=""
export METRIC_swap_exclude="swap"
export METRIC_network_exclude="interface"

#
# Histograms - Metric Reports to be generated
# Specify the reports that you would like generated
# X-Axis = Valid values = clients ,   scale
# Y-Axis = category = cpuUtilization  memory  loadAverageMinute  tasks  swap  network 
#                     diskIO.latency diskIO.throughput diskIO.iops diskIO.diskQueueDepth
# Clients vs Metric        Scale vs Metric
export PMON_REPORTS_HISTO_CLIENTS="cpuUtilization memory diskIO.latency diskIO.diskQueueDepth tasks swap network"
export PMON_REPORTS_HISTO_SCALE="diskIO.latency diskIO.throughput tasks"